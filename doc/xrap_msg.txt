xrap_msg(3)
===========

NAME
----
xrap_msg - XRAP serialization over ZMTP

SYNOPSIS
--------
----
//  Create a new xrap_msg
xrap_msg_t *
    xrap_msg_new (int id);

//  Destroy the xrap_msg
void
    xrap_msg_destroy (xrap_msg_t **self_p);

//  Receive and parse a xrap_msg from the input
xrap_msg_t *
    xrap_msg_recv (void *input);

//  Send the xrap_msg to the output, and destroy it
int
    xrap_msg_send (xrap_msg_t **self_p, void *output);

//  Send the POST to the output in one step
int
    xrap_msg_send_post (void *output,
        char *parent,
        char *content_type,
        zframe_t *content_body);
    
//  Send the POST_OK to the output in one step
int
    xrap_msg_send_post_ok (void *output,
        uint16_t status_code,
        char *location,
        char *etag,
        uint64_t date_modified,
        char *content_type,
        zframe_t *content_body);
    
//  Send the GET to the output in one step
int
    xrap_msg_send_get (void *output,
        char *resource,
        uint64_t if_modified_since,
        char *if_none_match,
        char *content_type);
    
//  Send the GET_OK to the output in one step
int
    xrap_msg_send_get_ok (void *output,
        uint16_t status_code,
        char *content_type,
        zframe_t *content_body);
    
//  Send the GET_EMPTY to the output in one step
int
    xrap_msg_send_get_empty (void *output,
        uint16_t status_code);
    
//  Send the PUT to the output in one step
int
    xrap_msg_send_put (void *output,
        char *resource,
        uint64_t if_unmodified_since,
        char *if_match,
        char *content_type,
        zframe_t *content_body);
    
//  Send the PUT_OK to the output in one step
int
    xrap_msg_send_put_ok (void *output,
        uint16_t status_code,
        char *location,
        char *etag,
        uint64_t date_modified);
    
//  Send the DELETE to the output in one step
int
    xrap_msg_send_delete (void *output,
        char *resource,
        uint64_t if_unmodified_since,
        char *if_match);
    
//  Send the DELETE_OK to the output in one step
int
    xrap_msg_send_delete_ok (void *output,
        uint16_t status_code);
    
//  Send the ERROR to the output in one step
int
    xrap_msg_send_error (void *output,
        uint16_t status_code,
        char *status_text);
    
//  Duplicate the xrap_msg message
xrap_msg_t *
    xrap_msg_dup (xrap_msg_t *self);

//  Print contents of message to stdout
void
    xrap_msg_dump (xrap_msg_t *self);

//  Get/set the message address
zframe_t *
    xrap_msg_address (xrap_msg_t *self);
void
    xrap_msg_set_address (xrap_msg_t *self, zframe_t *address);

//  Get the xrap_msg id and printable command
int
    xrap_msg_id (xrap_msg_t *self);
void
    xrap_msg_set_id (xrap_msg_t *self, int id);
char *
    xrap_msg_command (xrap_msg_t *self);

//  Get/set the parent field
char *
    xrap_msg_parent (xrap_msg_t *self);
void
    xrap_msg_set_parent (xrap_msg_t *self, char *format, ...);

//  Get/set the content_type field
char *
    xrap_msg_content_type (xrap_msg_t *self);
void
    xrap_msg_set_content_type (xrap_msg_t *self, char *format, ...);

//  Get/set the content_body field
zframe_t *
    xrap_msg_content_body (xrap_msg_t *self);
void
    xrap_msg_set_content_body (xrap_msg_t *self, zframe_t *frame);

//  Get/set the status_code field
uint16_t
    xrap_msg_status_code (xrap_msg_t *self);
void
    xrap_msg_set_status_code (xrap_msg_t *self, uint16_t status_code);

//  Get/set the location field
char *
    xrap_msg_location (xrap_msg_t *self);
void
    xrap_msg_set_location (xrap_msg_t *self, char *format, ...);

//  Get/set the etag field
char *
    xrap_msg_etag (xrap_msg_t *self);
void
    xrap_msg_set_etag (xrap_msg_t *self, char *format, ...);

//  Get/set the date_modified field
uint64_t
    xrap_msg_date_modified (xrap_msg_t *self);
void
    xrap_msg_set_date_modified (xrap_msg_t *self, uint64_t date_modified);

//  Get/set the resource field
char *
    xrap_msg_resource (xrap_msg_t *self);
void
    xrap_msg_set_resource (xrap_msg_t *self, char *format, ...);

//  Get/set the if_modified_since field
uint64_t
    xrap_msg_if_modified_since (xrap_msg_t *self);
void
    xrap_msg_set_if_modified_since (xrap_msg_t *self, uint64_t if_modified_since);

//  Get/set the if_none_match field
char *
    xrap_msg_if_none_match (xrap_msg_t *self);
void
    xrap_msg_set_if_none_match (xrap_msg_t *self, char *format, ...);

//  Get/set the if_unmodified_since field
uint64_t
    xrap_msg_if_unmodified_since (xrap_msg_t *self);
void
    xrap_msg_set_if_unmodified_since (xrap_msg_t *self, uint64_t if_unmodified_since);

//  Get/set the if_match field
char *
    xrap_msg_if_match (xrap_msg_t *self);
void
    xrap_msg_set_if_match (xrap_msg_t *self, char *format, ...);

//  Get/set the status_text field
char *
    xrap_msg_status_text (xrap_msg_t *self);
void
    xrap_msg_set_status_text (xrap_msg_t *self, char *format, ...);

//  Self test of this class
int
    xrap_msg_test (bool verbose);
----

DESCRIPTION
-----------

xrap_msg - XRAP serialization over ZMTP


EXAMPLE
-------
.From xrap_msg_test method
----
    //  Simple create/destroy test
    xrap_msg_t *self = xrap_msg_new (0);
    assert (self);
    xrap_msg_destroy (&self);

    //  Create pair of sockets we can send through
    zctx_t *ctx = zctx_new ();
    assert (ctx);

    void *output = zsocket_new (ctx, ZMQ_DEALER);
    assert (output);
    zsocket_bind (output, "inproc://selftest");
    void *input = zsocket_new (ctx, ZMQ_ROUTER);
    assert (input);
    zsocket_connect (input, "inproc://selftest");
    
    //  Encode/send/decode and verify each message type

    self = xrap_msg_new (XRAP_MSG_POST);
    xrap_msg_set_parent (self, "Life is short but Now lasts for ever");
    xrap_msg_set_content_type (self, "Life is short but Now lasts for ever");
    xrap_msg_set_content_body (self, zframe_new ("Captcha Diem", 12));
    xrap_msg_send (&self, output);
    
    self = xrap_msg_recv (input);
    assert (self);
    assert (streq (xrap_msg_parent (self), "Life is short but Now lasts for ever"));
    assert (streq (xrap_msg_content_type (self), "Life is short but Now lasts for ever"));
    assert (zframe_streq (xrap_msg_content_body (self), "Captcha Diem"));
    xrap_msg_destroy (&self);

    self = xrap_msg_new (XRAP_MSG_POST_OK);
    xrap_msg_set_status_code (self, 123);
    xrap_msg_set_location (self, "Life is short but Now lasts for ever");
    xrap_msg_set_etag (self, "Life is short but Now lasts for ever");
    xrap_msg_set_date_modified (self, 123);
    xrap_msg_set_content_type (self, "Life is short but Now lasts for ever");
    xrap_msg_set_content_body (self, zframe_new ("Captcha Diem", 12));
    xrap_msg_send (&self, output);
    
    self = xrap_msg_recv (input);
    assert (self);
    assert (xrap_msg_status_code (self) == 123);
    assert (streq (xrap_msg_location (self), "Life is short but Now lasts for ever"));
    assert (streq (xrap_msg_etag (self), "Life is short but Now lasts for ever"));
    assert (xrap_msg_date_modified (self) == 123);
    assert (streq (xrap_msg_content_type (self), "Life is short but Now lasts for ever"));
    assert (zframe_streq (xrap_msg_content_body (self), "Captcha Diem"));
    xrap_msg_destroy (&self);

    self = xrap_msg_new (XRAP_MSG_GET);
    xrap_msg_set_resource (self, "Life is short but Now lasts for ever");
    xrap_msg_set_if_modified_since (self, 123);
    xrap_msg_set_if_none_match (self, "Life is short but Now lasts for ever");
    xrap_msg_set_content_type (self, "Life is short but Now lasts for ever");
    xrap_msg_send (&self, output);
    
    self = xrap_msg_recv (input);
    assert (self);
    assert (streq (xrap_msg_resource (self), "Life is short but Now lasts for ever"));
    assert (xrap_msg_if_modified_since (self) == 123);
    assert (streq (xrap_msg_if_none_match (self), "Life is short but Now lasts for ever"));
    assert (streq (xrap_msg_content_type (self), "Life is short but Now lasts for ever"));
    xrap_msg_destroy (&self);

    self = xrap_msg_new (XRAP_MSG_GET_OK);
    xrap_msg_set_status_code (self, 123);
    xrap_msg_set_content_type (self, "Life is short but Now lasts for ever");
    xrap_msg_set_content_body (self, zframe_new ("Captcha Diem", 12));
    xrap_msg_send (&self, output);
    
    self = xrap_msg_recv (input);
    assert (self);
    assert (xrap_msg_status_code (self) == 123);
    assert (streq (xrap_msg_content_type (self), "Life is short but Now lasts for ever"));
    assert (zframe_streq (xrap_msg_content_body (self), "Captcha Diem"));
    xrap_msg_destroy (&self);

    self = xrap_msg_new (XRAP_MSG_GET_EMPTY);
    xrap_msg_set_status_code (self, 123);
    xrap_msg_send (&self, output);
    
    self = xrap_msg_recv (input);
    assert (self);
    assert (xrap_msg_status_code (self) == 123);
    xrap_msg_destroy (&self);

    self = xrap_msg_new (XRAP_MSG_PUT);
    xrap_msg_set_resource (self, "Life is short but Now lasts for ever");
    xrap_msg_set_if_unmodified_since (self, 123);
    xrap_msg_set_if_match (self, "Life is short but Now lasts for ever");
    xrap_msg_set_content_type (self, "Life is short but Now lasts for ever");
    xrap_msg_set_content_body (self, zframe_new ("Captcha Diem", 12));
    xrap_msg_send (&self, output);
    
    self = xrap_msg_recv (input);
    assert (self);
    assert (streq (xrap_msg_resource (self), "Life is short but Now lasts for ever"));
    assert (xrap_msg_if_unmodified_since (self) == 123);
    assert (streq (xrap_msg_if_match (self), "Life is short but Now lasts for ever"));
    assert (streq (xrap_msg_content_type (self), "Life is short but Now lasts for ever"));
    assert (zframe_streq (xrap_msg_content_body (self), "Captcha Diem"));
    xrap_msg_destroy (&self);

    self = xrap_msg_new (XRAP_MSG_PUT_OK);
    xrap_msg_set_status_code (self, 123);
    xrap_msg_set_location (self, "Life is short but Now lasts for ever");
    xrap_msg_set_etag (self, "Life is short but Now lasts for ever");
    xrap_msg_set_date_modified (self, 123);
    xrap_msg_send (&self, output);
    
    self = xrap_msg_recv (input);
    assert (self);
    assert (xrap_msg_status_code (self) == 123);
    assert (streq (xrap_msg_location (self), "Life is short but Now lasts for ever"));
    assert (streq (xrap_msg_etag (self), "Life is short but Now lasts for ever"));
    assert (xrap_msg_date_modified (self) == 123);
    xrap_msg_destroy (&self);

    self = xrap_msg_new (XRAP_MSG_DELETE);
    xrap_msg_set_resource (self, "Life is short but Now lasts for ever");
    xrap_msg_set_if_unmodified_since (self, 123);
    xrap_msg_set_if_match (self, "Life is short but Now lasts for ever");
    xrap_msg_send (&self, output);
    
    self = xrap_msg_recv (input);
    assert (self);
    assert (streq (xrap_msg_resource (self), "Life is short but Now lasts for ever"));
    assert (xrap_msg_if_unmodified_since (self) == 123);
    assert (streq (xrap_msg_if_match (self), "Life is short but Now lasts for ever"));
    xrap_msg_destroy (&self);

    self = xrap_msg_new (XRAP_MSG_DELETE_OK);
    xrap_msg_set_status_code (self, 123);
    xrap_msg_send (&self, output);
    
    self = xrap_msg_recv (input);
    assert (self);
    assert (xrap_msg_status_code (self) == 123);
    xrap_msg_destroy (&self);

    self = xrap_msg_new (XRAP_MSG_ERROR);
    xrap_msg_set_status_code (self, 123);
    xrap_msg_set_status_text (self, "Life is short but Now lasts for ever");
    xrap_msg_send (&self, output);
    
    self = xrap_msg_recv (input);
    assert (self);
    assert (xrap_msg_status_code (self) == 123);
    assert (streq (xrap_msg_status_text (self), "Life is short but Now lasts for ever"));
    xrap_msg_destroy (&self);

    zctx_destroy (&ctx);
----

SEE ALSO
--------
linkxrap:xrap[7]
